{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nestjs-microservice-api/./apps/notification/src/app/app.controller.ts","webpack://nestjs-microservice-api/./apps/notification/src/app/app.module.ts","webpack://nestjs-microservice-api/./apps/notification/src/app/app.service.ts","webpack://nestjs-microservice-api/./apps/notification/src/app/gateway/gateway.module.ts","webpack://nestjs-microservice-api/./apps/notification/src/app/gateway/gateway.ts","webpack://nestjs-microservice-api/external commonjs \"@nestjs/common\"","webpack://nestjs-microservice-api/external commonjs \"@nestjs/core\"","webpack://nestjs-microservice-api/external commonjs \"@nestjs/websockets\"","webpack://nestjs-microservice-api/external commonjs \"socket.io\"","webpack://nestjs-microservice-api/external commonjs \"tslib\"","webpack://nestjs-microservice-api/webpack/bootstrap","webpack://nestjs-microservice-api/./apps/notification/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { GatewayModule } from './gateway/gateway.module';\n\n@Module({\n  imports: [GatewayModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to notification!' };\n  }\n}\n","import { Module } from \"@nestjs/common\";\nimport { MyGateway } from \"./gateway\";\n\n@Module({\n    providers: [MyGateway]\n})\nexport class GatewayModule {\n\n}","import { OnModuleInit } from \"@nestjs/common\";\nimport { MessageBody, SubscribeMessage, WebSocketGateway, WebSocketServer } from \"@nestjs/websockets\";\nimport { Server } from 'socket.io'\n@WebSocketGateway()\nexport class MyGateway implements OnModuleInit {\n\n    @WebSocketServer()\n    server: Server;\n\n\n    onModuleInit() {\n        this.server.on('connection', (socket) => {\n            console.log('socket.id', socket.id)\n            console.log('connected')\n        })\n    }\n\n    @SubscribeMessage('newMessage')\n    onNewMessage(@MessageBody() body: any) {\n        this.server.emit('onMessage', {\n            msg: 'New Message',\n            content: JSON.parse(body.content).data\n        })\n    }\n\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/websockets\");","module.exports = require(\"socket.io\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}