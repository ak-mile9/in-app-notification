{"version":3,"file":"main.js","mappings":"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","sources":["webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/app.controller.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/app.module.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/app.service.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notification-kafka/kafka.module.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notification-kafka/models/interface.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notification-kafka/producer.controler.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notification-kafka/producer.service.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notifications/models/notification.entity.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notifications/models/notification.interface.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notifications/notifications.controller.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notifications/notifications.module.ts","webpack://nestjs-microservice-api/./apps/notification-postgres/src/app/notifications/notifications.service.ts","webpack://nestjs-microservice-api/external commonjs \"@nestjs/common\"","webpack://nestjs-microservice-api/external commonjs \"@nestjs/config\"","webpack://nestjs-microservice-api/external commonjs \"@nestjs/core\"","webpack://nestjs-microservice-api/external commonjs \"@nestjs/typeorm\"","webpack://nestjs-microservice-api/external commonjs \"kafkajs\"","webpack://nestjs-microservice-api/external commonjs \"rxjs\"","webpack://nestjs-microservice-api/external commonjs \"tslib\"","webpack://nestjs-microservice-api/external commonjs \"typeorm\"","webpack://nestjs-microservice-api/webpack/bootstrap","webpack://nestjs-microservice-api/./apps/notification-postgres/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n\n}\n","import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { NotificationsModule } from './notifications/notifications.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true\n    })\n    ,\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.POSTGRES_HOST,\n      port: parseInt(process.env.POSTGRES_PORT),\n      username: process.env.POSTGRES_USER,\n\n      password: process.env.POSTGRES_PASSWORD,\n      database: process.env.POSTGRES_DATABASE,\n      autoLoadEntities: true,\n      synchronize: true\n\n    }),\n    NotificationsModule\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to notification-postgres!' };\n  }\n}\n","import { Module } from \"@nestjs/common\";\nimport { KafkaConsumerService } from \"./consumer.service\";\nimport { KafkaController } from \"./producer.controler\";\nimport { KafkaProducerService } from \"./producer.service\";\n\n\n@Module({\n    controllers: [KafkaController]\n    // providers: [KafkaProducerService, KafkaConsumerService],\n    // exports: [KafkaProducerService, KafkaConsumerService]\n})\nexport class KafkaModule { }","export interface RecordsInterface {\n    id?: number;\n    title: string;\n\n    user: string;\n    for_role: string\n    createdAt?: Date;\n}\n","import { Body, Controller, Post } from \"@nestjs/common\";\nimport { RecordsInterface } from \"./models/interface\";\n\n\n@Controller('v1/kafka')\nexport class KafkaController {\n\n\n    @Post('produce')\n    produce(@Body() payload: RecordsInterface) {\n        return payload;\n    }\n\n}","import { Injectable, OnApplicationShutdown, OnModuleInit } from \"@nestjs/common\";\nimport { Kafka, Producer, ProducerRecord } from \"kafkajs\";\n\n@Injectable()\nexport class KafkaProducerService implements OnModuleInit, OnApplicationShutdown {\n\n    private readonly kafka = new Kafka({\n\n        brokers: ['localhost:9092']\n    })\n    private readonly producer: Producer = this.kafka.producer()\n    async onModuleInit() {\n        console.log('Producer Service onModuleInit')\n\n        await this.producer.connect();\n    }\n\n    async produce(record: ProducerRecord) {\n        console.log('Producer Service Produce')\n\n        await this.producer.send(record)\n    }\n\n    async onApplicationShutdown(signal?: string) {\n        console.log('Signal on shutDown', signal)\n        await this.producer.disconnect()\n    }\n}\n\n","import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n\n@Entity('notifications_for_user')\nexport class NotificationEntity {\n\n    @PrimaryGeneratedColumn()\n    id?: number;\n\n    @Column()\n    title: string\n\n    @Column()\n    user: string\n\n\n    @Column({ default: '' })\n    for_role: string;\n\n    @Column('boolean', { default: false })\n    is_aware_of: boolean;\n\n    @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\n\n    created_at?: Date;\n\n}","export interface NotificationsInterface {\n    id?: number;\n    title: string;\n\n    user: string;\n    for_role: string\n    createdAt?: Date;\n}\n\nexport enum Roles {\n    RPROJECTA_ROLE_1 = \"RPROJECTA_ROLE_1\",\n    RPROJECTA_ROLE_2 = \"RPROJECTA_ROLE_2\",\n    RPROJECTA_ROLE_3 = \"RPROJECTA_ROLE_3\",\n    RPROJECTA_ROLE_4 = \"RPROJECTA_ROLE_4\",\n}\n\nexport interface UserNotificationPayloadInterface { user: string, for_role: string }","import { Body, Controller, Get, Param, Patch, Post } from \"@nestjs/common\";\nimport { NotificationsInterface, UserNotificationPayloadInterface } from \"./models/notification.interface\";\nimport { NotificationsService } from \"./notifications.service\";\n\n\n@Controller('v1')\nexport class NotificationsController {\n\n    constructor(private notificationService: NotificationsService) { }\n\n    @Get('notifications')\n    public getNotificatons() {\n        return this.notificationService.getNotifications()\n    }\n\n    @Get('notification/user/:id')\n    public getNotificationFor(@Param() param: { id: string }) {\n        return this.notificationService.getNotificationFor(param.id.toString());\n    }\n\n    @Get('notifications/role/:user_role')\n    public getUnAwaredNotificationsForRole(@Param() param: { user_role: string }) {\n        return this.notificationService.getUnAwaredNotificationsForRole(param.user_role)\n    }\n\n    @Get('notifications/user/:id/roles/:user_roles')\n    public getUnAwaredNotificationsForUserAndRole(@Param() param: { user_roles: string, id: string }) {\n        return this.notificationService.getUnAwaredNotificationsForUserAndRole(param)\n    }\n\n    @Post('notification')\n    create(@Body() notification: NotificationsInterface) {\n        console.table(notification)\n        return this.notificationService.setNotification(notification);\n    }\n\n    @Patch('notification')\n    updateNotificationAsAwaredForRole(@Body() payload: UserNotificationPayloadInterface) {\n\n        return this.notificationService.setNotificationAsAwared(payload);\n    }\n\n}","import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { KafkaModule } from \"../notification-kafka/kafka.module\";\nimport { KafkaProducerService } from \"../notification-kafka/producer.service\";\nimport { NotificationEntity } from \"./models/notification.entity\";\nimport { NotificationsController } from \"./notifications.controller\";\nimport { NotificationsService } from \"./notifications.service\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([NotificationEntity]), KafkaModule],\n    controllers: [NotificationsController],\n    providers: [NotificationsService, KafkaProducerService]\n})\nexport class NotificationsModule { }","import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { from, Observable } from \"rxjs\";\nimport { Repository } from \"typeorm\";\nimport { KafkaProducerService } from \"../notification-kafka/producer.service\";\nimport { NotificationEntity } from \"./models/notification.entity\";\nimport { NotificationsInterface, UserNotificationPayloadInterface } from \"./models/notification.interface\";\n\n@Injectable()\nexport class NotificationsService {\n    constructor(\n        @InjectRepository(NotificationEntity)\n        private readonly notificationRepository: Repository<NotificationEntity>,\n        private readonly kafkaProducer: KafkaProducerService) { }\n\n\n    getNotifications(): Observable<NotificationsInterface[]> {\n        return from(this.notificationRepository.find())\n    }\n\n    getNotificationFor(id: string): Observable<NotificationsInterface[]> {\n        return from(this.notificationRepository.find({ where: [{ user: id }] }))\n    }\n    getUnAwaredNotificationsForRole(for_role: string): Observable<NotificationsInterface[]> {\n        return from(this.notificationRepository.find({ where: [{ for_role, is_aware_of: false }] }))\n    }\n\n    getUnAwaredNotificationsForUserAndRole(param: { user_roles: string, id: string }) {\n        return from(this.notificationRepository.find({\n            where: [\n                {\n                    user: param.id,\n                    for_role: param.user_roles,\n                    is_aware_of: false\n                }\n            ]\n        }))\n    }\n    setNotification(notification: NotificationsInterface): Observable<NotificationsInterface> {\n        this.kafkaProducer.produce({ topic: 'create-notification', messages: [{ value: JSON.stringify(notification) }] })\n\n        return from(this.notificationRepository.save(notification))\n    }\n\n    async setNotificationAsAwared(payload: UserNotificationPayloadInterface) {\n        const { for_role, user } = payload;\n        console.table(payload)\n        const update = await this.notificationRepository\n            .createQueryBuilder()\n            .update(NotificationEntity)\n            .set({ is_aware_of: true })\n            .where('user = :user', { user: user.toString() })\n            .andWhere(\"for_role = :for_role\", { for_role: for_role }).execute();\n        if (update.affected > 0) {\n            return {\n                message: 'Updated sccessfully'\n            }\n        }\n        this.kafkaProducer.produce({ topic: 'update-notification', messages: [{ value: 'notificationCreated' }] })\n\n        return {\n            message: \"something went wrong\"\n        };\n\n    }\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"kafkajs\");","module.exports = require(\"rxjs\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  // const globalPrefix = 'v1';\n  // app.setGlobalPrefix(globalPrefix);\n  app.enableCors({\n    origin: true,\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',\n    credentials: true,\n  })\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}